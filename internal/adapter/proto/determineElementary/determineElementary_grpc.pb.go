// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: internal/adapter/proto/determineElementary.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DetermineElementary_Run_FullMethodName              = "/v1.DetermineElementary/Run"
	DetermineElementary_WaitandGetReault_FullMethodName = "/v1.DetermineElementary/WaitandGetReault"
	DetermineElementary_Stop_FullMethodName             = "/v1.DetermineElementary/Stop"
)

// DetermineElementaryClient is the client API for DetermineElementary service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DetermineElementaryClient interface {
	Run(ctx context.Context, in *DetermineElementaryIn, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WaitandGetReault(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SaveDetElementaryRes, error)
	Stop(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type determineElementaryClient struct {
	cc grpc.ClientConnInterface
}

func NewDetermineElementaryClient(cc grpc.ClientConnInterface) DetermineElementaryClient {
	return &determineElementaryClient{cc}
}

func (c *determineElementaryClient) Run(ctx context.Context, in *DetermineElementaryIn, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DetermineElementary_Run_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determineElementaryClient) WaitandGetReault(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SaveDetElementaryRes, error) {
	out := new(SaveDetElementaryRes)
	err := c.cc.Invoke(ctx, DetermineElementary_WaitandGetReault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determineElementaryClient) Stop(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DetermineElementary_Stop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DetermineElementaryServer is the server API for DetermineElementary service.
// All implementations must embed UnimplementedDetermineElementaryServer
// for forward compatibility
type DetermineElementaryServer interface {
	Run(context.Context, *DetermineElementaryIn) (*emptypb.Empty, error)
	WaitandGetReault(context.Context, *emptypb.Empty) (*SaveDetElementaryRes, error)
	Stop(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedDetermineElementaryServer()
}

// UnimplementedDetermineElementaryServer must be embedded to have forward compatible implementations.
type UnimplementedDetermineElementaryServer struct {
}

func (UnimplementedDetermineElementaryServer) Run(context.Context, *DetermineElementaryIn) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedDetermineElementaryServer) WaitandGetReault(context.Context, *emptypb.Empty) (*SaveDetElementaryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitandGetReault not implemented")
}
func (UnimplementedDetermineElementaryServer) Stop(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedDetermineElementaryServer) mustEmbedUnimplementedDetermineElementaryServer() {}

// UnsafeDetermineElementaryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DetermineElementaryServer will
// result in compilation errors.
type UnsafeDetermineElementaryServer interface {
	mustEmbedUnimplementedDetermineElementaryServer()
}

func RegisterDetermineElementaryServer(s grpc.ServiceRegistrar, srv DetermineElementaryServer) {
	s.RegisterService(&DetermineElementary_ServiceDesc, srv)
}

func _DetermineElementary_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetermineElementaryIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetermineElementaryServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetermineElementary_Run_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetermineElementaryServer).Run(ctx, req.(*DetermineElementaryIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetermineElementary_WaitandGetReault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetermineElementaryServer).WaitandGetReault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetermineElementary_WaitandGetReault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetermineElementaryServer).WaitandGetReault(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetermineElementary_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetermineElementaryServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetermineElementary_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetermineElementaryServer).Stop(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DetermineElementary_ServiceDesc is the grpc.ServiceDesc for DetermineElementary service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DetermineElementary_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.DetermineElementary",
	HandlerType: (*DetermineElementaryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _DetermineElementary_Run_Handler,
		},
		{
			MethodName: "WaitandGetReault",
			Handler:    _DetermineElementary_WaitandGetReault_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _DetermineElementary_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/adapter/proto/determineElementary.proto",
}
